services:
  client-consumer:
    image: client-consumer:0.0.1
    build:
      context: .
      dockerfile: consumer/Dockerfile
    ports:
      - "8082:8082"
    depends_on:
      service-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - SERVER_PORT= 8082
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:9092
      - SPRING_DATASOURCE_URL=jdbc:postgresql://service-db/kafka_db

  client-producer:
    image: client-producer:0.0.1
    build:
      context: .
      dockerfile: producer/Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - SERVER_PORT= 8081
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:9092
  kafka-streams:
    image: client-kafka-streams:0.0.1
    build:
      context: .
      dockerfile: kafkaStream/Dockerfile
    ports:
      - "8084:8084"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - SERVER_PORT= 8084
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:9092

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.5
    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "2181" ]
      interval: 10s
      timeout: 3s
      retries: 3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181

  kafka:
    image: confluentinc/cp-kafka:7.2.4
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - 29092:29092
    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "9092" ]
      interval: 10s
      timeout: 3s
      retries: 3
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: OUTSIDE://:29092,INTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: OUTSIDE://localhost:29092,INTERNAL://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

  service-db:
    image: postgres:14.7-alpine
    environment:
      POSTGRES_USER: username
      POSTGRES_PASSWORD: password
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "kafka_db" ]
      interval: 10s
      timeout: 3s
      retries: 3
    ports:
      - "15432:5432"
    volumes:
      - ./infrastructure/db/db_creation.sql:/docker-entrypoint-initdb.d/db_creation.sql
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"

    restart: unless-stopped

  pgadmin:
    container_name: pgadmin4_container
    image: dpage/pgadmin4:7
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: root
    ports:
      - "5050:80"

  kafka-topics-generator:
    image: confluentinc/cp-kafka:7.2.4
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:9092 --list
      
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic create.client --replication-factor 1 --partitions 5
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic create.transaction --replication-factor 1 --partitions 5
      
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "

  kafka-connect:
    image:  confluentinc/cp-kafka-connect:7.2.0
    container_name: kafka-connect
    depends_on:
      - kafka
    ports:
      - 8083:8083
    healthcheck:
      test: [ "CMD", "curl", "-f", "kafka-connect:8083/connectors" ]
      interval: 10s
      timeout: 3s
      retries: 3
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:9092
      CONNECT_GROUP_ID: kafka-connect
      CONNECT_CONFIG_STORAGE_TOPIC: connect_configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect_offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-status
      CONNECT_REST_PORT: 8083
      CONNECT_LISTENERS: http://0.0.0.0:8083
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_PLUGIN_PATH: '/usr/local/share/kafka/plugins/,/usr/share/java,/usr/share/confluent-hub-components/,/connectors/'
    command:
      - bash
      - -c
      - |
        confluent-hub install --no-prompt debezium/debezium-connector-postgres:1.7.0
        confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:10.4.0
        /etc/confluent/docker/run

  config-connector:
    image: confluentinc/cp-kafka-connect:7.2.0
    depends_on:
      kafka-connect:
        condition: service_healthy
    volumes:
      - ./kafka.connector.config.json:/etc/kafka/kafka.connector.config.json
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      " echo -e 'Creating Data Generator source'
            curl -H 'Content-Type: application/json' kafka-connect:8083/connectors --data @"../../etc/kafka/kafka.connector.config.json"
      "

  config-batch-connector:
    image: confluentinc/cp-kafka-connect:7.2.0
    depends_on:
      kafka-connect:
        condition: service_healthy
    volumes:
      - ./kafka.connector.batch.config.json:/etc/kafka/kafka.connector.batch.config.json
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      " echo -e 'Creating Data Generator source'
             curl -H 'Content-Type: application/json' kafka-connect:8083/connectors --data @"../../etc/kafka/kafka.connector.batch.config.json"
      "
  kafka-connect-ui:
    image: landoop/kafka-connect-ui:0.9.4
    hostname: kafka-connect-ui
    ports:
      - "8002:8000"
    environment:
      CONNECT_URL: "http://kafka-connect:8083/"
      PROXY: "true"
    depends_on:
      - kafka-connect